==============
Array Literals
==============

[];
[1];
[1, true, "str"];

---

(source_file 
  (array)
  (array 
    (num))
  (array 
    (num)
    (bool)
    (string)))

===========================
Array Declarations (new [])
===========================

var numbers = new [3];
var floats = new [10];

---

(source_file 
  (array_declaration (identifier) (num))
  (array_declaration (identifier) (num)))

========================
Array Element Assignment
========================

var numbers = new [3];
numbers[0] = 90;
numbers[1] = 150;
numbers[2] = 30;

---

(source_file
  (array_declaration
    (identifier)
    (num))
  (array_element_assignment
    (identifier)
    (num)
    (num))
  (array_element_assignment
    (identifier)
    (num)
    (num))
  (array_element_assignment
    (identifier)
    (num)
    (num)))

===========================
Array Access in Expressions
===========================

var floats = [0.2, 5.2, 5.6, 6.7];
var x = floats[0];
var z = floats[1];
var z = floats[1] + floats[2];

---

(source_file
      (assignment
        (identifier)
        (array
          (num)
          (num)
          (num)
          (num)))
      (assignment
        (identifier)
        (array_access
          (identifier)
          (num)))
      (assignment
        (identifier)
        (array_access
          (identifier)
          (num)))
      (assignment
        (identifier)
        (binary_expression
          (array_access
            (identifier)
            (num))
          (arithmetic_operator)
          (array_access
            (identifier)
            (num)))))

=======================
Arrays with Expressions
=======================

var data = [1 + 2, 3 * 4, 10 / 2];  
var computed = [x, y, z, x + y, y * z];  

---

(source_file 
  (assignment (identifier) (array (binary_expression (num) (arithmetic_operator) (num)) 
                                  (binary_expression (num) (arithmetic_operator) (num))
                                  (binary_expression (num) (arithmetic_operator) (num))))
  (assignment (identifier) (array (identifier) (identifier) (identifier)
                                  (binary_expression (identifier) (arithmetic_operator) (identifier))
                                  (binary_expression (identifier) (arithmetic_operator) (identifier)))))

=============
Nested Arrays
=============

var nested = [[1, 2], [3, 4], [5, 6]];
var multiDepth = [[[1], [2]], [[3], [4]]];

---

(source_file
  (assignment
    (identifier)
    (array
      (array (num) (num))
      (array (num) (num))
      (array (num) (num))))
  (assignment
    (identifier)
    (array
      (array
        (array (num))
        (array (num)))
      (array
        (array (num))
        (array (num))))))

============
Empty Arrays
============

var empty1 = [];
var empty2 = new [0];

---

(source_file
  (assignment
    (identifier)
    (array))
  (array_declaration
    (identifier)
    (num)))

===================
Array of Variables
===================

var x = 10;
var y = 20;
var z = 30;
var varsArray = [x, y, z];

---

(source_file
  (assignment (identifier) (num))
  (assignment (identifier) (num))
  (assignment (identifier) (num))
  (assignment
    (identifier)
    (array (identifier) (identifier) (identifier))))

===========================
Array with Mixed Data Types
===========================

var mixed = [42, "hello", true, 3.14];

---

(source_file
  (assignment
    (identifier)
    (array (num) (string) (bool) (num))))


===================
Array with For Loop
===================

var nums = [1, 2, 3, 4, 5];
for (var i = 0; i < 5; i = i + 1) {
    nums[i] = nums[i] * 2;
}

---

(source_file
  (assignment
    (identifier)
    (array
      (num)
      (num)
      (num)
      (num)
      (num)))
  (for_statement
    (assignment
      (identifier)
      (num))
    (comparison_expression
      (identifier)
      (comparison_operator)
      (num))
    (reassignment
      (identifier)
      (binary_expression
        (identifier)
        (arithmetic_operator)
        (num)))
    (block
      (array_element_assignment
        (identifier)
        (identifier)
        (binary_expression
          (array_access
            (identifier)
            (identifier))
          (arithmetic_operator)
          (num))))))
